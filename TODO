1) Have we discussed the API auto-retrying authentication on a 401 response?  If not, that's where I want to take the other API's, so you could be ahead of the curve if you did that.  It should be up to the user to enable re-auth or not, so maybe an argument to your Connection.new() method?  Then you'd want to update your methods that check return statuses for a 401 and re-auth.

2) On the Connection class, how about a method get_info() that returns (and sets instance variables) for number of containers and total storage on the account?  You currently have methods called count and bytes with each one performing a HEAD.  Since the one HTTP request returns both parameters, I'd just grab both values and set instance variables for them in the Connection object.  Calling get_info() will re-fresh the values.

Major and I discussed this in-person about the state-fulness of class objects versus what's in the storage system.  The bottom line is that any time you ask the storage system for information, it could be outdated, right?  It kinda rubbed Major the wrong way when I suggested he capture these values and set them as instance variables since they could get outdated.  However, it's a fallacy to think that re-fetching them each time the user calls "count" or "bytes" is "accurate".  It just reduces the time that the data may by "stale", right?  If I have a script that's uploading files continuously, each time I call the Connection's "bytes" method, that value will be outdated on the next upload.

You could extend the same argument for lists of containers/objects and that those lists should be kept in instance variables too.  The reason why we don't is that that can be memory consuming in an "infinite" storage system.  If I can have an unlimited number of containers/ objects, that could be bad for your health.

3) Container names are now allowed to be 256 bytes.  Which reminds me, is this multi-byte character safe or just single-byte character sets? I had a hell of a time with PHP's single/multi byte characters with things like "strlen".  I just want to double check with you that "string".size returns bytes versus characters.

Another question comes to mind while reviewing it.  Do you (or the underlying httplib) URL encode/decode container/object/metadata?  That obviously will help with passing in character names with non-alpha like []<>()=+-$. and utf8.

Can you add a version number to your User-Agent?  Major.Minor.Revision format is fine.  They will all be 1.x.y for v1 of Cloud Files.  I'd also like to keep 1.x consistent across all API's.  Our next API release (which I'd like to include your API with) will be 1.3.0.

In Container.object, you're calling the container instance's populate method.  Per my previous email, I wouldn't bother with that.  You're initiating two HEAD requests (storage+cdn) to try and keep the container instance's attributes updated because you've added a new storage object.  If the user wants an updated view, they can call
connection.get_container() again.

Container.objects probably needs 'prefix' to be url-encoded.

Container.create_object allows the user to set a 'noclobber' option if I'm reading that correctly.  The other API's do not support that. Their 'create_object' calls do not talk to the storage system at all. The 'get_object' calls will throw a 404=>NoSuchObject if the remote storage object does not exist.  Looks like your storage_object.initialize works the same way.

Ok, the big one I see that needs fixing is storage_object.data() (and the commented out data_stream()) method.  You're probably already working on this, but the user needs a way to pass a ruby 'block' to the method that can read from the stream in chunks.  Take a look at the AWS gem; they've got some great examples in there.

The same applies to object.write().  The data argument should support either an in-memory string, block, or byte-stream.

object.set_metadata() shouldn't need to call object.populate() again. Nothing changes about the remote object except for the headers.  If the http response is good, then just set the instance's metadata to the values that you sent (removes one HEAD call).

TESTS: Great work, looks like a comprehensive set of test coverage!   
Can I ask that you also throw in some tests for UTF8 container/object names too?
